{
	// Place your Secrets workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Inject Configuration": {
		"scope": "csharp",
		"prefix": "injectcnfg",
		"body": [
			"IConfiguration _config;",
			"public ValuesController(IConfiguration config)",
			"{",
			"    _config = config;",
			"}"
		],
		"description": "Snippet to create ValuesController constructor with injected Configuration"
	},
	"Pull Cmd Line Arg": {
		"scope": "csharp",
		"prefix": "cmdline",
		"body": [
			"string CmdLineConfigValue =_config.GetValue<string>(\"cmdlinearg\") ?? \"No Cmd Line Value Set\";"
		],
		"description": "Pulls a configuration setting that was set by command line, at least locally"
	},
	"Add UserSecretsId to csproj": {
		"prefix": "secrets",
		"body": [
			"<UserSecretsId>CoreConfig</UserSecretsId>"
		],
		"description": "Creates the UserSecretsId element in csproj file"
	},
	"Manual Builder Setup":{
		"prefix": "manbld",
		"body": [
			"ManualCreateDefaultBuilder(args)",
			".UseStartup<Startup>()",
			".Build()",
			".Run();"
		],
		"description": "Calls the manual webhost builder"
	},
	"All Environment Variables":{
		"prefix": "envars",
		"body": [
			"var envarConfigProvider = ((IConfigurationRoot)_config).Providers.Skip(3).Take(1).Single();",
			"",
            "Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider evcp = ",
            "    envarConfigProvider as Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider;",
			"",
			"var data = (IDictionary<string,string>)evcp.GetType().GetProperty(\"Data\", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(evcp);",            
			"",
			"return data.Select(d => $\"key: {d.Key}, value: {d.Value}\").ToArray();"
		],
		"description": "Example dumping all environment variables"
	}
}